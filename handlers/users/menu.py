from loader import dp, bot, log
from aiogram.types import Message, ReplyKeyboardRemove
from keyboards.default.menu import menu_garnish, menu_entree, menu_time, yes_no
from aiogram.dispatcher.filters import Command, Text


@dp.message_handler(content_types=['text'])
async def garnish_form_user(message:Message):
    user_garnish = message.text
    await bot.send_message(message.from_user.id, f'–¢—ã —Ö–æ—á–µ—à {user_garnish}?', reply_markup = yes_no)
    log(message)

@dp.message_handler(Command('start'))
async def bot_start(message:Message):
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π —Å–æ—Å—Ç–∞–≤–∏–º —Ç–≤–æ–π —É–∂–∏–Ωü§§\n–ñ–º—è–∫–Ω–∏ /menu')
    log(message)

@dp.message_handler(Command('menu'))
async def show_menu(message:Message):
    await message.answer('–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π –≥–∞—Ä–Ω–∏—Ä —Ö–æ—á–µ—à—å –Ω–∞ —É–∂–∏–Ω',
    reply_markup = menu_garnish)
    log(message)

@dp.message_handler(Text(equals=['–ü–∞—Å—Ç–∞', '–ì—Ä–µ—á–∫–∞', '–ö—É—Å-–∫—É—Å', '–ß–µ—á–µ–≤–∏—Ü–∞',]))
async def get_garnish(message:Message):
    global garnish
    garnish = message.text
    # if garnish == '–Ø –Ω–∞ –¥–∏–µ—Ç–µüôÖ‚Äç‚ôÇÔ∏è':
    #     await message.answer(f'–¢—ã –≤—ã–±—Ä–∞–ª {garnish}. –ú–æ–∂–µ—Ç —Ç–æ–≥–¥–∞, —á—Ç–æ —Ç–æ –ø–æ–ª–µ–≥—á–µ:',
    #     reply_markup = menu_diet)
        # log(message) 
    # else:
    await message.answer(f'–¢—ã –≤—ã–±—Ä–∞–ª {garnish}. \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —á—Ç–æ –±—É–¥–µ—à—å –∫ –≥–∞—Ä–Ω–∏—Ä—É', 
    reply_markup = menu_entree)
    log(message)


# @dp.message_handler(Text(equals=['–°–∞–ª–∞—Ç', '–¢–≤–æ—Ä–æ–≥', '–ô–æ–≥—É—Ä—Ç', '–§—Ä—É–∫—Ç–∏', '–û–±—Ä–∞—Ç–Ω–æ –∫ –≥–∞—Ä–Ω–∏—Ä—É']))
# async def get_diet(message:Message):
#     global diet
#     diet = message.text
#     if diet == '–û–±—Ä–∞—Ç–Ω–æ –∫ –≥–∞—Ä–Ω–∏—Ä—É':
#         await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –≥–∞—Ä–Ω–∏—Ä–∞',
#         reply_markup = menu_garnish)
        # log(message)
#     else:
#         await message.answer(f'–¢—ã –≤—ã–±—Ä–∞–ª {diet}. \n–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è',
#         reply_markup = menu_other_time)
        # log(message)

@dp.message_handler(Text(equals=['–°–∞–ª–∞—Ç', '–°—ã—Ä','–¢—É—à–µ–Ω—ã–µ –æ–≤–æ—â–∏', '–ñ–∞—Ä–µ–Ω–∞—è –∫—É—Ä–∏—Ü–∞', '–ì–∞—Ä–Ω–∏—Ä–∞ —Ö–≤–∞—Ç–∏—Ç –≤–ø–æ–ª–Ω–µüëå', '–û–±—Ä–∞—Ç–Ω–æ –∫ –≥–∞—Ä–Ω–∏—Ä—É']))
async def get_entree(message:Message):
    global entree
    entree = message.text
    if entree == '–û–±—Ä–∞—Ç–Ω–æ –∫ –≥–∞—Ä–Ω–∏—Ä—É':
        await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –≥–∞—Ä–Ω–∏—Ä–∞',
        reply_markup = menu_garnish)
    else:
        await message.answer(f'–¢—ã –≤—ã–±—Ä–∞–ª {entree}. \n–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è',
        reply_markup = menu_time)
        log(message)

# @dp.message_handler(Text(equals=['17:00', '18:00', '–î–∞–≤–∞–π —Å–µ–≥–æ–¥–Ω—è –ø–æ–ø–æ–∑–∂–µ', '–û–±—Ä–∞—Ç–Ω–æ –∫ –º–µ–Ω—é –¥–ª—è –¥–∏–µ—Ç—ã']))
# async def get_other_time(message:Message):
#     global other_time
#     other_time = message.text
#     if message.text == '–û–±—Ä–∞—Ç–Ω–æ –∫ –º–µ–Ω—é –¥–ª—è –¥–∏–µ—Ç—ã':
#         await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏—Ö –±–ª—é–¥',
#         reply_markup = menu_diet)
        # log(message)
#     else:
#         await message.answer('–ò —Ç–∞–∫, —Ç–≤–æ–π —É–∂–∏–Ω —ç—Ç–æ {} –∏ —Å–æ—Å—Ç–æ–∏—Ç—Å—è –æ–Ω {}'.format(diet, other_time),
#         reply_markup=ReplyKeyboardRemove())
        # log(message)

@dp.message_handler(Text(equals=['18:00', '19:00', '–î–∞–≤–∞–π —Å–µ–≥–æ–¥–Ω—è –ø–æ–ø–æ–∑–∂–µ', '–û–±—Ä–∞—Ç–Ω–æ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–ª—é–¥—É']))
async def get_time(message:Message):
    global time
    time = message.text
    if message.text == '–û–±—Ä–∞—Ç–Ω–æ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–ª—é–¥—É':
        await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª—é–¥–∞',
        reply_markup = menu_entree)
    else:
        await message.answer('–ò —Ç–∞–∫, —Ç–≤–æ–π —É–∂–∏–Ω —ç—Ç–æ {} —Å {} –∏ —Å–æ—Å—Ç–æ–∏—Ç—Å—è –æ–Ω {}'.format(garnish, entree, time),
        reply_markup=ReplyKeyboardRemove())
        log(message)

